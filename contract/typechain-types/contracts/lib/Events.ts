/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "BorrowerApplySuccessful"
      | "BorrowerApproveSuccessful"
      | "LenderDepositSuccessful"
      | "RepaySuccessful"
  ): EventFragment;
}

export namespace BorrowerApplySuccessfulEvent {
  export type InputTuple = [
    _lender: AddressLike,
    _borrower: AddressLike,
    _amount: BigNumberish,
    _duration: BigNumberish
  ];
  export type OutputTuple = [
    _lender: string,
    _borrower: string,
    _amount: bigint,
    _duration: bigint
  ];
  export interface OutputObject {
    _lender: string;
    _borrower: string;
    _amount: bigint;
    _duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowerApproveSuccessfulEvent {
  export type InputTuple = [
    _approverAddress: AddressLike,
    _borrowerAddress: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _approverAddress: string,
    _borrowerAddress: string,
    _amount: bigint
  ];
  export interface OutputObject {
    _approverAddress: string;
    _borrowerAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LenderDepositSuccessfulEvent {
  export type InputTuple = [_depositor: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_depositor: string, _amount: bigint];
  export interface OutputObject {
    _depositor: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaySuccessfulEvent {
  export type InputTuple = [
    _lender: AddressLike,
    _borrower: AddressLike,
    _amount: BigNumberish,
    _timeOfRepay: BigNumberish
  ];
  export type OutputTuple = [
    _lender: string,
    _borrower: string,
    _amount: bigint,
    _timeOfRepay: bigint
  ];
  export interface OutputObject {
    _lender: string;
    _borrower: string;
    _amount: bigint;
    _timeOfRepay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Events extends BaseContract {
  connect(runner?: ContractRunner | null): Events;
  waitForDeployment(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "BorrowerApplySuccessful"
  ): TypedContractEvent<
    BorrowerApplySuccessfulEvent.InputTuple,
    BorrowerApplySuccessfulEvent.OutputTuple,
    BorrowerApplySuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "BorrowerApproveSuccessful"
  ): TypedContractEvent<
    BorrowerApproveSuccessfulEvent.InputTuple,
    BorrowerApproveSuccessfulEvent.OutputTuple,
    BorrowerApproveSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "LenderDepositSuccessful"
  ): TypedContractEvent<
    LenderDepositSuccessfulEvent.InputTuple,
    LenderDepositSuccessfulEvent.OutputTuple,
    LenderDepositSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "RepaySuccessful"
  ): TypedContractEvent<
    RepaySuccessfulEvent.InputTuple,
    RepaySuccessfulEvent.OutputTuple,
    RepaySuccessfulEvent.OutputObject
  >;

  filters: {
    "BorrowerApplySuccessful(address,address,uint256,uint256)": TypedContractEvent<
      BorrowerApplySuccessfulEvent.InputTuple,
      BorrowerApplySuccessfulEvent.OutputTuple,
      BorrowerApplySuccessfulEvent.OutputObject
    >;
    BorrowerApplySuccessful: TypedContractEvent<
      BorrowerApplySuccessfulEvent.InputTuple,
      BorrowerApplySuccessfulEvent.OutputTuple,
      BorrowerApplySuccessfulEvent.OutputObject
    >;

    "BorrowerApproveSuccessful(address,address,uint256)": TypedContractEvent<
      BorrowerApproveSuccessfulEvent.InputTuple,
      BorrowerApproveSuccessfulEvent.OutputTuple,
      BorrowerApproveSuccessfulEvent.OutputObject
    >;
    BorrowerApproveSuccessful: TypedContractEvent<
      BorrowerApproveSuccessfulEvent.InputTuple,
      BorrowerApproveSuccessfulEvent.OutputTuple,
      BorrowerApproveSuccessfulEvent.OutputObject
    >;

    "LenderDepositSuccessful(address,uint256)": TypedContractEvent<
      LenderDepositSuccessfulEvent.InputTuple,
      LenderDepositSuccessfulEvent.OutputTuple,
      LenderDepositSuccessfulEvent.OutputObject
    >;
    LenderDepositSuccessful: TypedContractEvent<
      LenderDepositSuccessfulEvent.InputTuple,
      LenderDepositSuccessfulEvent.OutputTuple,
      LenderDepositSuccessfulEvent.OutputObject
    >;

    "RepaySuccessful(address,address,uint256,uint256)": TypedContractEvent<
      RepaySuccessfulEvent.InputTuple,
      RepaySuccessfulEvent.OutputTuple,
      RepaySuccessfulEvent.OutputObject
    >;
    RepaySuccessful: TypedContractEvent<
      RepaySuccessfulEvent.InputTuple,
      RepaySuccessfulEvent.OutputTuple,
      RepaySuccessfulEvent.OutputObject
    >;
  };
}

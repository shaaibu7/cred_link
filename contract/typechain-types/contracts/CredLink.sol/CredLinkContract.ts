/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CredLinkContract {
  export type BorrowerDetailsStruct = {
    duration: BigNumberish;
    amount: BigNumberish;
    hasBorrow: boolean;
  };

  export type BorrowerDetailsStructOutput = [
    duration: bigint,
    amount: bigint,
    hasBorrow: boolean
  ] & { duration: bigint; amount: bigint; hasBorrow: boolean };
}

export interface CredLinkContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "applyForLoan"
      | "approveBorrower"
      | "getLenderBalance"
      | "lenderDeposit"
      | "repayLoan"
      | "tokenAddress"
      | "viewApproveBorrowers"
      | "viewAvailableLoans"
      | "viewInterestedBorrowers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BorrowerApplySuccessful"
      | "BorrowerApproveSuccessful"
      | "LenderDepositSuccessful"
      | "RepaySuccessful"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "applyForLoan",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveBorrower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLenderBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewApproveBorrowers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewAvailableLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewInterestedBorrowers",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "applyForLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLenderBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewApproveBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAvailableLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewInterestedBorrowers",
    data: BytesLike
  ): Result;
}

export namespace BorrowerApplySuccessfulEvent {
  export type InputTuple = [
    _lender: AddressLike,
    _borrower: AddressLike,
    _amount: BigNumberish,
    _duration: BigNumberish
  ];
  export type OutputTuple = [
    _lender: string,
    _borrower: string,
    _amount: bigint,
    _duration: bigint
  ];
  export interface OutputObject {
    _lender: string;
    _borrower: string;
    _amount: bigint;
    _duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowerApproveSuccessfulEvent {
  export type InputTuple = [
    _approverAddress: AddressLike,
    _borrowerAddress: AddressLike,
    _amount: BigNumberish
  ];
  export type OutputTuple = [
    _approverAddress: string,
    _borrowerAddress: string,
    _amount: bigint
  ];
  export interface OutputObject {
    _approverAddress: string;
    _borrowerAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LenderDepositSuccessfulEvent {
  export type InputTuple = [_depositor: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_depositor: string, _amount: bigint];
  export interface OutputObject {
    _depositor: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaySuccessfulEvent {
  export type InputTuple = [
    _lender: AddressLike,
    _borrower: AddressLike,
    _amount: BigNumberish,
    _timeOfRepay: BigNumberish
  ];
  export type OutputTuple = [
    _lender: string,
    _borrower: string,
    _amount: bigint,
    _timeOfRepay: bigint
  ];
  export interface OutputObject {
    _lender: string;
    _borrower: string;
    _amount: bigint;
    _timeOfRepay: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CredLinkContract extends BaseContract {
  connect(runner?: ContractRunner | null): CredLinkContract;
  waitForDeployment(): Promise<this>;

  interface: CredLinkContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  applyForLoan: TypedContractMethod<
    [_lender: AddressLike, _duration: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveBorrower: TypedContractMethod<
    [_borrowerToApprove: AddressLike],
    [void],
    "nonpayable"
  >;

  getLenderBalance: TypedContractMethod<[], [bigint], "view">;

  lenderDeposit: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  repayLoan: TypedContractMethod<[_lender: AddressLike], [void], "nonpayable">;

  tokenAddress: TypedContractMethod<[], [string], "view">;

  viewApproveBorrowers: TypedContractMethod<
    [],
    [CredLinkContract.BorrowerDetailsStructOutput[]],
    "view"
  >;

  viewAvailableLoans: TypedContractMethod<[], [[string[], bigint[]]], "view">;

  viewInterestedBorrowers: TypedContractMethod<
    [],
    [CredLinkContract.BorrowerDetailsStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "applyForLoan"
  ): TypedContractMethod<
    [_lender: AddressLike, _duration: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveBorrower"
  ): TypedContractMethod<
    [_borrowerToApprove: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLenderBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lenderDeposit"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<[_lender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "viewApproveBorrowers"
  ): TypedContractMethod<
    [],
    [CredLinkContract.BorrowerDetailsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewAvailableLoans"
  ): TypedContractMethod<[], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "viewInterestedBorrowers"
  ): TypedContractMethod<
    [],
    [CredLinkContract.BorrowerDetailsStructOutput[]],
    "view"
  >;

  getEvent(
    key: "BorrowerApplySuccessful"
  ): TypedContractEvent<
    BorrowerApplySuccessfulEvent.InputTuple,
    BorrowerApplySuccessfulEvent.OutputTuple,
    BorrowerApplySuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "BorrowerApproveSuccessful"
  ): TypedContractEvent<
    BorrowerApproveSuccessfulEvent.InputTuple,
    BorrowerApproveSuccessfulEvent.OutputTuple,
    BorrowerApproveSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "LenderDepositSuccessful"
  ): TypedContractEvent<
    LenderDepositSuccessfulEvent.InputTuple,
    LenderDepositSuccessfulEvent.OutputTuple,
    LenderDepositSuccessfulEvent.OutputObject
  >;
  getEvent(
    key: "RepaySuccessful"
  ): TypedContractEvent<
    RepaySuccessfulEvent.InputTuple,
    RepaySuccessfulEvent.OutputTuple,
    RepaySuccessfulEvent.OutputObject
  >;

  filters: {
    "BorrowerApplySuccessful(address,address,uint256,uint256)": TypedContractEvent<
      BorrowerApplySuccessfulEvent.InputTuple,
      BorrowerApplySuccessfulEvent.OutputTuple,
      BorrowerApplySuccessfulEvent.OutputObject
    >;
    BorrowerApplySuccessful: TypedContractEvent<
      BorrowerApplySuccessfulEvent.InputTuple,
      BorrowerApplySuccessfulEvent.OutputTuple,
      BorrowerApplySuccessfulEvent.OutputObject
    >;

    "BorrowerApproveSuccessful(address,address,uint256)": TypedContractEvent<
      BorrowerApproveSuccessfulEvent.InputTuple,
      BorrowerApproveSuccessfulEvent.OutputTuple,
      BorrowerApproveSuccessfulEvent.OutputObject
    >;
    BorrowerApproveSuccessful: TypedContractEvent<
      BorrowerApproveSuccessfulEvent.InputTuple,
      BorrowerApproveSuccessfulEvent.OutputTuple,
      BorrowerApproveSuccessfulEvent.OutputObject
    >;

    "LenderDepositSuccessful(address,uint256)": TypedContractEvent<
      LenderDepositSuccessfulEvent.InputTuple,
      LenderDepositSuccessfulEvent.OutputTuple,
      LenderDepositSuccessfulEvent.OutputObject
    >;
    LenderDepositSuccessful: TypedContractEvent<
      LenderDepositSuccessfulEvent.InputTuple,
      LenderDepositSuccessfulEvent.OutputTuple,
      LenderDepositSuccessfulEvent.OutputObject
    >;

    "RepaySuccessful(address,address,uint256,uint256)": TypedContractEvent<
      RepaySuccessfulEvent.InputTuple,
      RepaySuccessfulEvent.OutputTuple,
      RepaySuccessfulEvent.OutputObject
    >;
    RepaySuccessful: TypedContractEvent<
      RepaySuccessfulEvent.InputTuple,
      RepaySuccessfulEvent.OutputTuple,
      RepaySuccessfulEvent.OutputObject
    >;
  };
}

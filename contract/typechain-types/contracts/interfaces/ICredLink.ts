/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ICredLinkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "applyForLoan"
      | "approveBorrower"
      | "lenderDeposit"
      | "openDispute"
      | "repayLoan"
      | "viewApproveBorrowers"
      | "viewAvailableLoans"
      | "viewInterestedBorrowers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applyForLoan",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveBorrower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lenderDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openDispute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewApproveBorrowers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewAvailableLoans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewInterestedBorrowers",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "applyForLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewApproveBorrowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAvailableLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewInterestedBorrowers",
    data: BytesLike
  ): Result;
}

export interface ICredLink extends BaseContract {
  connect(runner?: ContractRunner | null): ICredLink;
  waitForDeployment(): Promise<this>;

  interface: ICredLinkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  applyForLoan: TypedContractMethod<
    [_loanId: BigNumberish, _duration: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveBorrower: TypedContractMethod<
    [_borrowerToApprove: AddressLike],
    [void],
    "nonpayable"
  >;

  lenderDeposit: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  openDispute: TypedContractMethod<[], [void], "nonpayable">;

  repayLoan: TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;

  viewApproveBorrowers: TypedContractMethod<[], [void], "nonpayable">;

  viewAvailableLoans: TypedContractMethod<[], [void], "nonpayable">;

  viewInterestedBorrowers: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "applyForLoan"
  ): TypedContractMethod<
    [_loanId: BigNumberish, _duration: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveBorrower"
  ): TypedContractMethod<
    [_borrowerToApprove: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lenderDeposit"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "openDispute"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewApproveBorrowers"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewAvailableLoans"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewInterestedBorrowers"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
